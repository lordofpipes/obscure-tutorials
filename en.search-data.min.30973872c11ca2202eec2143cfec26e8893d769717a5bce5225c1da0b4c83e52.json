[{"id":0,"href":"/obscure-tutorials/docs/linux-tutorials/fedora-snapper/","title":"How to install Fedora Minimal with Snapper","section":"Linux Tutorials","content":"The goal: Get a \u0026ldquo;riceable\u0026rdquo; Linux setup that can be rolled back in a flexible manner, by running a clever OpenSUSE tool on a non-OpenSUSE distro. Make a system that is difficult to break in a way that will waste a whole day getting it working again. All the fun of Linux desktop ricing, but none of the risk.\nSkip introduction\nSnapper? But what about Silverblue? # Silverblue is a fantastic project that intends to introduce the concept of immutable operating systems to the Linux desktop and server. It does this by packaging an entire set of operating system files together, updating it all at once when you reboot the system. Currently, there are four OSTree-based projects, one that includes system files for GNOME desktop (Silverblue), another that provides system files for a KDE desktop (Kinoite), as well as an IoT platform (Fedora IoT) and a headless container platform (CoreOS).\nThis system is broadly similar to how Windows, Android, macOS, and iOS work.\nAnalogy: Windows Update\nWindows manages the files under C:\\Windows\\System32 and prevents the user from modifying them with loose technical restrictions imposed by Windows Explorer. Applications like notepad.exe and all the various dynamically-linked libraries Windows comes with are not meant to be edited. This provides a stable and predictable system, carefully managed by Windows Update.\nOn Windows, anything outside of this can be installed to various user- and administrator-controlled folders like C:\\Program Files or %appdata%. The analogue to this in Silverblue are the various mutable directories that are attached to /var, such as /home/, /home/foo/.local/bin/, /var/lib/flatpak/, /etc/\nIt should be noted that Windows Update is not a true immutable system, and has numerous disadvantages compared to a true immutable system, which are discussed below. But like Windows Update, Silverblue provides the benefit of being able to rollback to the last working system files if something breaks.\nrpm-ostree? # Continuing with the Windows analogy, sometimes a program wants to make deeper changes to the system. It can screw with .dll files and add .sys driver files to the Windows folder, which is a clunky but ultimately effective way to modify the Windows system. But it\u0026rsquo;s not great, on Windows you don\u0026rsquo;t have a vetted distribution that is designed to work with the base files, rather you have some possibly-broken drivers distributed by a vendor that doesn\u0026rsquo;t care if they break your system.\nrpm-ostree is the analogue to this in Fedora Silverblue. It uses some special Linux kernel filesystem features to overlay extra files on top of the immutable base system. It can even be used to install out-of-tree drivers such as the NVidia drivers distributed from RPMFusion.\nGenerally rpm-ostree works pretty well. The reason rpm-ostree works so well is that the original system snapshot is constructed from an amalgamation of rpms from the Fedora distribution, and rpm-ostree is designed to be aware of how the original snapshot was constructed. It\u0026rsquo;s quite an elegant solution!\nFlatpak? # Flatpak is an incredible innovation in the Linux desktop space — it is an alternative way to install Linux desktop software that serves to alleviate deficiencies in the usual Linux distro model. In the Windows analogy, it is C:\\Program Files, but much more sophisticated.\nThere are numerous benefits of Flatpak:\nIt provides numerous security guarantees and an Android-like permission system. Flatpak (or another isolation technology) is absolutely essential for desktop Linux to be secure. It provides developer-to-user distribution. This is not always what we want — Linux distros maintain an adversarial relationship with upstream developers, and this is by design — it is a check on developers. Distros can patch stuff and make packages more compatible and cohesive with each other. But most of the time, the end user just wants fast updates, which Flatpak can do because software is published directly by the author. It provides consistent runtime libraries, meaning less DLL hell. It works well with immutable systems like Silverblue and Valve SteamOS, because it doesn\u0026rsquo;t modify the base system like rpm-ostree does, and can carry libraries that are separate from the base system, while still having great integration with the platform. So given the first three benefits, we should probably be using Flatpak to install certain applications, regardless of whether we\u0026rsquo;re using Silverblue or normal Fedora. Later in the tutorial we will be installing Firefox using Flatpak.\nNow that we\u0026rsquo;re primed on the solution that OSTree, Silverblue, and Flatpak in combination presents, we\u0026rsquo;ll explore the Linux Ricing subculture and their requirements, which is the topic of this tutorial.\nLinux Ricers, and ridding your system of bloat # There is a subculture of the Linux community that wishes to completely customize their Linux system from the ground up. They are terrified of bloat \u0026amp; extra software that is not needed. So they have specific requirements and either run into issues with Silverblue, or more likely immutable Linux systems just weren\u0026rsquo;t marketed to them in the first place.\nSilverblue Problem #1: Limited to GNOME and KDE # The Silverblue OSTree distributions are only available in two flavors, GNOME and KDE. Don\u0026rsquo;t want GNOME\u0026rsquo;s gedit text editor? You could use rpm-ostree to remove it — this will mask the files from appearing, but they are still stored. But if you wanted to remove hundreds of GNOME packages, rpm-ostree will have to maintain a list of thousands of files to mask.\nLinux ricers are often not using GNOME or KDE, they usually want to start from scratch using basic Xorg or Wayland wlroots-based software. They want to be able to directly manipulate a .xinitrc script. After freeing themselves of bloat, they want to install an assortment of \u0026ldquo;unix philosophy\u0026rdquo; system-level software that doesn\u0026rsquo;t easily fit into the Flatpak way of doing things.\nThis is why they are often using Archlinux, Gentoo, NixOS, Debian, and Voidlinux. These OSes plunge you into a command line so you can edit some text files to start a computing setup that you will hopefully be using for years. These are great operating systems, but they are not Fedora — they aren\u0026rsquo;t keeping up with the innovation in the Linux desktop space (except for NixOS perhaps), and at the same time they aren\u0026rsquo;t always so stable.\nSilverblue Problem #2: Rollbacks \u0026amp; updates only somewhat help you fix /etc/ — its handling of /etc is not time machine snapshots # Each time you switch to a different snapshot, OSTree will do a three-way diff based merge on /etc/ to update its contents. If this three-way diff fails, you could get an /etc/ that is broken. A Linux ricer may wish to have their system packages and their /etc/ folder always in sync with the backup snapshots.\nNo, Silverblue won\u0026#39;t give you this. Silverblue Problem #3: Reboots required # It\u0026rsquo;s not rational of course, but Linux ricers care about uptime. They know when a reboot is actually required vs. when the software is just being cautious. Fedora Silverblue requires reboots to make changes to rpm-ostree. Thankfully it does not have a Windows Vista style loading screen (it\u0026rsquo;s very quick to switch out the old snapshot for the new one) but still, it would be nice to only need to do this for rollbacks and new kernels.\nSnapper # Snapper is an OpenSUSE technology. OpenSUSE uses the Btrfs filesystem by default, which has copy-on-write and snapshots. Filesystem-level snapshots give you the capability to take a set of files and create a copy of it that doesn\u0026rsquo;t actually take up any extra space, until one version of the files is modified and diverges from the original.\nSnapper puts the entire system into a Btrfs subvolume, and has hooks in tools like the package manager and YaST to automatically create a Btrfs snapshot every time you install a package or update the system.\nFor Linux ricers, their entire root filesystem is not just a set of changes from a base image (ala Silverblue), but rather is a constantly evolving system as they change customizations over the years. So Snapper is the perfect solution to have whole-system rollback capabilities on a heavily customized Linux desktop.\nTutorial: Set up a Fedora Minimal installation with Snapper # This is an advanced tutorial intended for Linux enthusaists. This process has been tested for Fedora 36 and Fedora 37. Other versions may not work! Adjust your procedure if you run into issues.\nThis is a tutorial for those who wish to start with a minimal Fedora installation and set up minimalistic X11 window managers, all while having Snapper for whole-system rollback capabilities.\nDownload the \u0026ldquo;Everything\u0026rdquo; installation medium from the alternate downloads page for Fedora Linux. If you are not looking to create a minimal installation, you can just get Workstation or any of the other spins.\nBoot the medium, select a language. Click on Software Selection.\nIf you are not interested in setting up a minimal installation, you can skip this step.\nSelect Minimal Install and add Common NetworkManager Submodules (will help you get Wifi working with nmcli or nmtui later on) and Standard.\nClick Installation Destination.\nClick Advanced Custom (Blivet-GUI) and press Done.\nVerify that you are installing to the correct disk and click the plus icon.\nAdd an EFI system partition, or a boot partition. If using UEFI, use the following configuration:\nSize: 512 MiB Filesystem: EFI System Partition Mountpoint: /boot/efi If using legacy boot, consider upping the size to 1 to 2 GiB, because Snapper will put multiple different kernel images on this partition. Note that for legacy boot you will also need a 1MiB BIOS boot partition as the first partition on the drive.\n[If using legacy boot] First partition: Size: 1 MiB Filesystem: BIOS Boot Second partition: Size: 1536 MiB Filesystem: ext4 Mountpoint: /boot Add another partition.\nUsing the following configuration, fill the rest of the available space:\nDevice Type: Btrfs Volume Mountpoint: / On the left column, click on the Btrfs subvolume you just created.\nCreate a subvolume to store Snapper snapshots. Name it snapper and let its mountpoint be /.snapshots\nAfter this, you should create four other subvolumes, so there should be:\n(This is the one you just created) Name: snapshots Mountpoint: /.snapshots Name: home Mountpoint: /home Name: var-cache Mountpoint: /var/cache Name: var-tmp Mountpoint: /var/tmp Name: var-log Mountpoint: /var/log Name: plocate-data Mountpoint: /var/lib/plocate Optional: add these subvolumes for developer tools that store large amounts of frequently-updating data:\nIf you want to use libvirt and create virtual machine disk images\nName: libvirt-data Mountpoint: /var/lib/libvirt If you use the MySQL database software\nName: mysql-data Mountpoint: /var/lib/mysql If you use the MariaDB database sotware\nName: mariadb-data Mountpoint: /var/lib/mariadb If you use the PostgreSQL database software\nName: pgsql-data Mountpoint: /var/lib/pgsql If you use Redis key-value store software\nName: redis-data Mountpoint: /var/lib/redis If you use Docker containerization software\nName: docker-data Mountpoint: /var/lib/docker If you use Docker containerization software, or anything else that uses containerd\nName: containerd-data Mountpoint: /var/lib/containerd If you use lxd containerization software\nName: lxd-data Mountpoint: /var/lib/lxd If you use Toolbox or Podman\nName: containers-data Mountpoint: /var/lib/containers If you use the /srv directory\nName: srv Mountpoint: /srv You can always create these subvolumes later.\nAlternatively, you might consider putting the entire /var folder on a separate subvolume, but by doing this you won\u0026rsquo;t include the Flatpak folder /var/lib/flatpak in the Snapper rollbacks.\nThe reason for all these subvolumes is to ensure Snapper is ignoring temporary files and other stuff that is changing constantly. We don\u0026rsquo;t need these to be considered part of the system state that Snapper needs to preserve.\nHere is what the final result should look like:\nClick Done after you have verified everything is correct. Click Accept Changes to continue.\nCreate any accounts you need, and configure anything else you might need to change in the installation.\nBegin the installation.\nYou have now installed a minimal Fedora setup!\nSSH daemon [OPTIONAL] # When starting out on a newly set up minimal installation, you should probably ssh in from another PC rather than using the clunky Linux console. You can disable this later when you are done.\nAssign a hostname:\n# sudo hostnamectl set-hostname foobar Start sshd:\n# sudo systemctl start sshd # sudo systemctl enable sshd To show LAN IP:\n# ip addr Shell ricing [OPTIONAL] # Before we start, lets install some dependencies to get a nice comfortable zsh-based shell:\n# sudo dnf install zsh fzf PackageKit-command-not-found util-linux-user sqlite git Ignore the command in the screenshot below, use the fixed command above\nInstall zplug, an easy scripts manager for zsh:\n# curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh Run chsh and set the shell to /usr/bin/zsh. Log out and log back in.\nSave the following to ~/.zshrc:\n[[ -f ~/.profile ]] \u0026amp;\u0026amp; source ~/.profile source ~/.zplug/init.zsh zplug themes/dpoggi, from:oh-my-zsh if ! zplug check --verbose; then printf \u0026#34;Install? [y/N]: \u0026#34; if read -q; then echo; zplug install fi fi zplug load source /usr/share/fzf/shell/key-bindings.zsh HISTFILE=~/.zsh_history HISTSIZE=100000000 SAVEHIST=100000000 bindkey -e bindkey \u0026#34;^[[1;5C\u0026#34; forward-word bindkey \u0026#34;^[[1;5D\u0026#34; backward-word bindkey \u0026#34;^H\u0026#34; backward-kill-word bindkey \u0026#34;^[[3;5~\u0026#34; kill-word setopt BANG_HIST setopt EXTENDED_HISTORY setopt INC_APPEND_HISTORY setopt SHARE_HISTORY setopt HIST_EXPIRE_DUPS_FIRST setopt HIST_IGNORE_DUPS setopt HIST_IGNORE_ALL_DUPS setopt HIST_FIND_NO_DUPS setopt HIST_IGNORE_SPACE setopt HIST_SAVE_NO_DUPS setopt HIST_REDUCE_BLANKS setopt HIST_VERIFY setopt HIST_BEEP autoload -Uz compinit compinit autoload -U bashcompinit bashcompinit We have a nice shell now, much more pleasant than the bash defaults. Feel free to add on to the zplug config.\nInstalling Snapper and setting up Grub integration # We can inspect how the subvolumes are set up:\n# sudo btrfs subvolume list / # sudo btrfs filesystem show / # sudo lsblk -p # cat /etc/fstab /etc/fstab contents example:\nThere is no need to modify any of this right now, this is just an sanity check to see what the Fedora installer has created.\nUUID=FD87-791A /boot/efi vfat umask=0077,shortname=winnt 0 2 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 / btrfs defaults 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /.snapshots btrfs subvol=snapshots,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /home btrfs subvol=home,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /srv btrfs subvol=srv,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/cache btrfs subvol=var-cache,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/containerd btrfs subvol=containerd-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/containers btrfs subvol=containers-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/docker btrfs subvol=docker-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/libvirt btrfs subvol=libvirt-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/lxd btrfs subvol=lxd-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/mariadb btrfs subvol=mariadb-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/mysql btrfs subvol=mysql-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/pgsql btrfs subvol=pgsql-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/lib/plocate btrfs subvol=plocate-data,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/log btrfs subvol=var-log,compress=zstd:1 0 0 UUID=9f2ebb76-0cc0-4473-9c82-2856500e1d22 /var/tmp btrfs subvol=var-tmp,compress=zstd:1 0 0 If your setup looks roughly like this, you can continue.\nFirst, if you created these, you may wish to configure some of the heaviest /var/ subvolumes to disable copy-on-write. Some database software doesn\u0026rsquo;t play well with it and causes performance issues.\n# sudo chattr -R +C /var/lib/libvirt # sudo chattr -R +C /var/lib/mysql # sudo chattr -R +C /var/lib/mariadb # sudo chattr -R +C /var/lib/pgsql Allow for snapshot booting by editing /etc/default/grub. Add the following line:\n[...] SUSE_BTRFS_SNAPSHOT_BOOTING=\u0026#34;true\u0026#34; Update grub configuration to reflect this change:\n# sudo grub2-mkconfig -o /boot/grub2/grub.cfg Reboot:\n# sudo reboot Install Snapper, and the dnf hooks for automatically creating before/after snapshots every time packages are changed:\n# sudo dnf install snapper python3-dnf-plugin-snapper inotify-tools Delete and recreate the /.snapper subvolume to get snapper to take over it.\n# sudo umount /.snapshots # sudo rmdir /.snapshots # sudo snapper -c root create-config / # sudo btrfs subvolume delete /.snapshots # sudo mkdir /.snapshots Reload fstab:\n# sudo systemctl daemon-reload # sudo mount -a You can verify that the subvolume is mounted correctly:\n# lsblk -p Configure Snapper to allow your account to administrate it:\n# sudo snapper -c root set-config ALLOW_USERS=$USER SYNC_ACL=yes # sudo chown -R :$USER /.snapshots Unhide the grub menu:\n# sudo grub2-editenv - unset menu_auto_hide Install grub-btrfs, a tool to automatically generate grub listings for Snapper snapshots. This is a script that works transparently to update grub every time /.snapshots is modified, similar to how OpenSUSE works.\n# sudo dnf install make # git clone https://github.com/Antynea/grub-btrfs.git /tmp/grub-btrfs # cd /tmp/grub-btrfs # sudo make install Edit the config file for grub-btrfs at /etc/default/grub-btrfs/config.\nEdit #1: Make sure GRUB_BTRFS_MKCONFIG is uncommented and set to /usr/sbin/grub2-mkconfig\nThat is /usr/sbin, not /usr/bin!\nGRUB_BTRFS_MKCONFIG=\u0026#34;/usr/sbin/grub2-mkconfig\u0026#34; Edit #2: Make sure GRUB_BTRFS_SCRIPT_CHECK is uncommented and set to grub2-script-check\nGRUB_BTRFS_SCRIPT_CHECK=\u0026#34;grub2-script-check\u0026#34; Edit #3: Make sure GRUB_BTRFS_GRUB_DIRNAME is uncommented and set to /boot/grub2. Do not follow the Fedora advice in the commented out section, it is meant for Fedora 33 and earlier.\nGRUB_BTRFS_GRUB_DIRNAME=\u0026#34;/boot/grub2\u0026#34; In patch format:\n--- /tmp/a +++ /tmp/b @@ -90,7 +90,7 @@ # Might be grub2 on some systems. # For example, on Fedora with EFI : \u0026#34;/boot/efi/EFI/fedora\u0026#34; # Default: \u0026#34;/boot/grub\u0026#34; -#GRUB_BTRFS_GRUB_DIRNAME=\u0026#34;/boot/grub2\u0026#34; +GRUB_BTRFS_GRUB_DIRNAME=\u0026#34;/boot/grub2\u0026#34; # Location of kernels/initramfs/microcode. # Use by \u0026#34;grub-btrfs\u0026#34; to detect the boot partition and the location of kernels/initrafms/microcodes. @@ -104,13 +104,13 @@ # For example, on Fedora : \u0026#34;/sbin/grub2-mkconfig\u0026#34; # You can use only name or full path. # Default: grub-mkconfig -#GRUB_BTRFS_MKCONFIG=/usr/bin/grub2-mkconfig +GRUB_BTRFS_MKCONFIG=\u0026#34;/usr/sbin/grub2-mkconfig\u0026#34; # Name of grub-script-check command, use by \u0026#34;grub-btrfs\u0026#34; # Might be \u0026#39;grub2-script-check\u0026#39; on some systems (Fedora ...) # For example, on Fedora : \u0026#34;grub2-script-check\u0026#34; # Default: grub-script-check -#GRUB_BTRFS_SCRIPT_CHECK=grub2-script-check +GRUB_BTRFS_SCRIPT_CHECK=\u0026#34;grub2-script-check\u0026#34; # Path of grub-mkconfig_lib file, use by \u0026#34;grub-btrfs\u0026#34; # Might be \u0026#39;/usr/share/grub2/grub-mkconfig_lib\u0026#39; on some systems (Opensuse ...) Once you are done, regenerate the grub config and enable the systemd unit for watching /.snapshots in real time:\n# sudo grub2-mkconfig -o /boot/grub2/grub.cfg # sudo systemctl enable --now grub-btrfsd.service Using Snapper # Success, you have now installed Snapper! You can use snapper ls to see the snapshots it has created:\nA snapshot will be generated every time you run a dnf command that changes the system. You can access these snapshots from the grub menu.\nBy selecting this, you will boot into a read-only system where you can verify your system is in a working state before switching to it. As an example, we rollback to a snapshot before htop was installed:\nhtop is gone:\nTo rollback to it, you can run this command, where \u0026lt;NUM\u0026gt; is the id number of the snapshot you wish to return to. You can use --ambit classic to switch to a read-write copy of the chosen snapshot. --ambit transactional is equivalent to selecting the read-only grub entry.\n# snapper --ambit classic rollback \u0026lt;NUM\u0026gt; Refer to the official Snapper Tutorial for advanced usage.\nRicing an X11 desktop [OPTIONAL] # Now that we have a minimal Fedora setup, we can start installing things. In this example we\u0026rsquo;ll install SDDM with Openbox and Polybar. First we\u0026rsquo;ll be using some package groups to make the basics easy:\n# sudo dnf install @base-x \u0026#34;@Hardware Support\u0026#34; \u0026#34;@Fonts\u0026#34; \u0026#34;@Input Methods\u0026#34; \u0026#34;@Multimedia\u0026#34; \u0026#34;@Printing Support\u0026#34; Then we install the meat of what we want:\n# sudo dnf install sddm polybar openbox lxappearance lxappearance-obconf obconf picom We\u0026rsquo;ll grab some themes:\n# sudo dnf install sddm-themes arc-theme arc-kde lxappearance feh Install some applications:\n# sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo # sudo flatpak install org.mozilla.firefox # sudo dnf install kitty neofetch Add autostart script for Openbox at ~/.config/openbox/autostart\n#!/bin/bash picom \u0026amp; polybar \u0026amp; feh --bg-scale /usr/share/backgrounds/f37/default/f37-02-night.png \u0026amp; Start sddm on boot:\nsudo systemctl enable sddm sudo systemctl start sddm sudo systemctl set-default graphical.target © lordpipe\nLicensed CC BY — copy this document for your own use.\n"},{"id":1,"href":"/obscure-tutorials/docs/security-tips/full-malware-checkup/","title":"How to run a full malware checkup","section":"Security Tips","content":"This is a tutorial for cleaning up a computer. Aside from Microsoft Defender, the tools used are best for one-time use, and are not the best antivirus software for continuous protection.\nFollow as many steps as you can, including the browser checkup tutorial at the end.\nWindows and macOS # First, if on Windows, download and run BleepingComputer RKill. This will kill any actively running malware, so that Malwarebytes can do its job without any interference, as well as temporarily reset certain Windows settings to a predictable state. You will not need to give it any input, just let it run until completion.\nDownload and install Malwarebytes. Do not install Malwarebytes Browser Guard when installing it (uBlock Origin is a better tool)\n(Don\u0026#39;t install Malwarebytes Browser Guard) Click Scan and let it run. Click Next to allow it to fix any issues it finds.\nNext, download ADWCleaner. This is a Malwarebytes product, but it catches different malware from the normal Malwarebytes. It is particularly good at weeding out software that breaks Minecraft and other video games. It does not require installation.\nRun it, click Scan Now, once it completes the scan click Next and allow it to fix any issues it finds. If it finds none, allow it to run the basic repair.\nReboot your computer and continue following the steps below.\nWindows only - Sophos and Defender # Optional: After the above steps, download and install Sophos HitmanPro. This is a good \u0026ldquo;second opinion\u0026rdquo; malware scanner, but it has a restrictive free trial so for free users it can only be used once. In order to download it you must register to have your email address spammed with Sophos products, but this can be cancelled.\nOnce you are done with these one-time scans, you can remove these tools from your computer.\nYou should now enable Windows Defender, which is a more lightweight malware scanner that works in the background.\nOpen Windows Security\nClick Virus \u0026amp; threat protection. Click Turn on\nYou should now be reasonably protected against PC malware.\nFirefox and Chrome users # These days, browsers hold the most sensitive data on your entire computer. It's absolutely essential that you keep it secure. Seriously, do not skip this part of the checkup! In the following sections we will be investigating browser malware. First, we\u0026rsquo;ll start off by checking the signatures on the browser itself. Often malware will circumvent extension signing rules by shipping a fake version of Google Chrome or Firefox. If you don\u0026rsquo;t do this first, then any malware extensions may get automatically re-installed immediately after removing them.\nFinally, we will be investigating the extensions themselves.\nmacOS instructions # Download and install WhatsYourSign.\nRight click your web browser .Application and click Signing Info\nVerify the notarization. The vast majority of web browsers should have Apple Root CA at the bottom of the chain, indicating that Apple has notarized the company that made the browser.\nWindows instructions # Run your web browser. Open task manager.\nFind your web browser in the process list. Click the \u0026gt; arrow to expand its subprocesses. Right click one of these, and click Properties\nClick on Digital Signatures, and click Details\nDoes it look legit? For example, here is what \u0026ldquo;legit\u0026rdquo; looks like for Google Chrome as of 2022-03-14:\nIf it says \u0026ldquo;Chromium\u0026rdquo; or anything is off, you should reinstall your web browser immediately and change all your passwords. Chromium is a legitimate open source version of Chrome, but it is often compiled with malware to create fake versions of the Google Chrome web browser.\nBrowser extensions checkup # Next, go to your extensions settings. In Chrome, go to chrome://extensions. In Firefox, go to about:addons\nRemove anything you don\u0026rsquo;t recognize, especially things related to search engines. You should also uninstall anything you haven\u0026rsquo;t used in a while. Less extensions = less exploitable surface.\nRecommendations for browser extensions to protect from malware # Do not use your anti-virus\u0026rsquo; builtin browser extension. These extensions usually suck and often just do something uBlock Origin can already do.\nuBlock Origin # uBlock Origin is a free and open source content blocker. It has a large quantity of automatically-updating blocklists to prevent ads and many malware websites from loading.\nIt is available for Chrome, Firefox, Edge, Opera. It works best on Firefox since Firefox is the only browser that allows extensions to block HTTP requests before they even happen.\nFor an extra-secure way to browse the web, uBlock comes with a Javascript whitelisting feature so you have to manually approve scripts to run on each domain you visit.\nStopModReposts # StopModReposts is a browser extension that specializes in Minecraft-related malware. The team behind it categorizes hundreds of sites known for posting fake versions of popular Minecraft mods. These websites frequently show up on search engines and have been reported to Google dozens of times, but Google won\u0026rsquo;t do anything about the problem. It is a must-have if young children play Minecraft on your computer.\n© lordpipe\nLicensed CC BY — copy this document for your own use.\n"},{"id":2,"href":"/obscure-tutorials/docs/security-tips/auto-screen-lock/","title":"How to enable automatic screen locking","section":"Security Tips","content":"If you live with younger kids or hostile and/or idiotic family or roomates, you may wish to automatically lock your screen after a certain period of inactivity, to prevent unauthorized access.\nDoing this is recommended if you are staff on UltraVanilla. If you work any sort of remote job you should be doing this!\nWindows # Open Lock screen settings\nClick Screen timeout\nClick On resume, display login screen\nEnter a wait time of 15 minutes\nIf you are on Windows 11 and have a phone, you may wish to configure automatically locking when a bluetooth device is no longer in range by going to Accounts \u0026gt; Sign-in options \u0026gt; Dynamic lock\nTip: You can use Win + L at any time to manually lock.\nLinux KDE # Open System Settings\nClick Workspace Behavior\nClick Screen Locking and configure a timeout of 15 minutes:\nmacOS # Open System Preferences\nClick Desktop \u0026amp; Screen Saver\nSet a timeout of 10 minutes\nClick Security \u0026amp; Privacy\nClick Require password and set a timeout of 1 minutes. Alternatively, configure any combination of screensaver and password lock timeout that adds up to less than 15 minutes.\n© lordpipe\nLicensed CC BY — copy this document for your own use.\n"},{"id":3,"href":"/obscure-tutorials/docs/security-tips/discord-2fa/","title":"How to enable 2FA on a Discord account","section":"Security Tips","content":" Choosing a 2-factor authentication app # TOTP-based authentication is a standardized system, so there are different options to choose from:\nApp Platforms Has sync? Open source? Notes Authy ✅ ❌ Requires Snap on Linux. Has vendor lock-in — it will not show you your codes. Has better restore functionality than other apps Aegis ✅ ✅ Sync is via cloud storage API WinAuth ❌ ✅ Ravio ✅ ✅ Sync is via iCloud TOTP.app ❌ ✅ Stored in browser cookies oathtool ❌ ✅ Advanced pass-otp ❌ ✅ Advanced App to avoid Reason ❌ Google Authenticator Bad vendor lock-in, no sync ❌ Microsoft Authenticator Bad vendor lock-in, very buggy After you have chosen an app # Before starting, you should consider performing a malware checkup and browser checkup procedure to defang any current compromise on your PC from being able to steal authentication info.\nIn this example, we will use Authy.\nLogin to Discord and click the gear icon labelled User Settings.\nClick Enable Two-Factor Auth\nEnter account password to continue.\nGo to your authenticator app and create a new entry. In this example we are using Authy.\nScan the QR code, or type in the code it generates.\nTip: You can copy this QR code or the text for later reference, and you can add the code to multiple different apps for redundancy.\nGive it a name and an icon (optional) and set the token length to 6-digit. Click Save.\nCopy the 6-digit code it generates into the discord website to verify that it is working properly. Click Next.\nYou are done! Make a paper backup of your backup codes if you wish.\n© lordpipe\nLicensed CC BY — copy this document for your own use.\n"},{"id":4,"href":"/obscure-tutorials/docs/security-tips/microsoft-2fa/","title":"How to enable TOTP-based 2FA on a Microsoft account","section":"Security Tips","content":" Choosing a 2-factor authentication app # TOTP-based authentication is a standardized system, so there are different options to choose from:\nApp Platforms Has sync? Open source? Notes Authy ✅ ❌ Requires Snap on Linux. Has vendor lock-in — it will not show you your codes. Has better restore functionality than other apps Aegis ✅ ✅ Sync is via cloud storage API WinAuth ❌ ✅ Ravio ✅ ✅ Sync is via iCloud TOTP.app ❌ ✅ Stored in browser cookies oathtool ❌ ✅ Advanced pass-otp ❌ ✅ Advanced App to avoid Reason ❌ Google Authenticator Bad vendor lock-in, no sync ❌ Microsoft Authenticator Bad vendor lock-in, very buggy After you have chosen an app # Before starting, you should consider performing a malware checkup and browser checkup procedure to defang any current compromise on your PC from being able to steal authentication info.\nIn this example, we will use Authy. Login to your account by visiting account.microsoft.com or search the web for login to microsoft account.\nScroll down and click Security\nScroll down and click Two step verification - Turn on.\nClick Next.\nClick set up a different Authenticator app to avoid the dark pattern.\nWhy? The Microsoft Authenticator app is buggy and has vendor lock-in preventing you from easily switching to other services.\nGo to your authenticator app and create a new entry. In this example we are using Authy.\nScan the QR code, or type in the code it generates.\nTip: You can copy this QR code or the text for later reference, and you can add the code to multiple different apps for redundancy.\nGive it a name and an icon (optional) and set the token length to 6-digit. Click Save.\nCopy the 6-digit code it generates into the Microsoft website to verify that it is working properly. Click Next.\nYou are done! Make a paper backup of your backup codes if you wish.\n© lordpipe\nLicensed CC BY — copy this document for your own use.\n"}]